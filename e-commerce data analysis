{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6476628,"sourceType":"datasetVersion","datasetId":3733600}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-08T23:52:26.878395Z","iopub.execute_input":"2024-08-08T23:52:26.878854Z","iopub.status.idle":"2024-08-08T23:52:26.894814Z","shell.execute_reply.started":"2024-08-08T23:52:26.878822Z","shell.execute_reply":"2024-08-08T23:52:26.893472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:26.897319Z","iopub.execute_input":"2024-08-08T23:52:26.897763Z","iopub.status.idle":"2024-08-08T23:52:26.902816Z","shell.execute_reply.started":"2024-08-08T23:52:26.897723Z","shell.execute_reply":"2024-08-08T23:52:26.901648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/e-commerce-customer-for-behavior-analysis/ecommerce_customer_data_large.csv\")\n\ndf.info() # get info about count and datatypes\ndf.shape  # returns info on rows and columns\ndf.head() # preview first 4 rows of data","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:26.904355Z","iopub.execute_input":"2024-08-08T23:52:26.904737Z","iopub.status.idle":"2024-08-08T23:52:27.543769Z","shell.execute_reply.started":"2024-08-08T23:52:26.904699Z","shell.execute_reply":"2024-08-08T23:52:27.542647Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:27.546959Z","iopub.execute_input":"2024-08-08T23:52:27.547708Z","iopub.status.idle":"2024-08-08T23:52:27.709683Z","shell.execute_reply.started":"2024-08-08T23:52:27.547667Z","shell.execute_reply":"2024-08-08T23:52:27.708544Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n# Count null values\nnull_counts = df.isnull().sum()\n\n# Print the counts\nprint(null_counts)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:27.710720Z","iopub.execute_input":"2024-08-08T23:52:27.711019Z","iopub.status.idle":"2024-08-08T23:52:27.780299Z","shell.execute_reply.started":"2024-08-08T23:52:27.710994Z","shell.execute_reply":"2024-08-08T23:52:27.778480Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for duplicates\nduplicates = df.duplicated()\n\n# Count the number of duplicates\nnum_duplicates = duplicates.sum()\n\nprint(\"Number of duplicate rows:\", num_duplicates)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:27.781935Z","iopub.execute_input":"2024-08-08T23:52:27.782360Z","iopub.status.idle":"2024-08-08T23:52:27.966363Z","shell.execute_reply.started":"2024-08-08T23:52:27.782327Z","shell.execute_reply":"2024-08-08T23:52:27.965201Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Mean imputation for column A\ndf['Returns'] = df['Returns'].fillna(0)\nprint(df['Returns'])","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:27.967735Z","iopub.execute_input":"2024-08-08T23:52:27.968035Z","iopub.status.idle":"2024-08-08T23:52:27.977702Z","shell.execute_reply.started":"2024-08-08T23:52:27.968005Z","shell.execute_reply":"2024-08-08T23:52:27.976511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert `Purchase Date` dtype to Datetime\ndf['Purchase Date'] = pd.to_datetime(df['Purchase Date'])\n\n# Split Year and Month into new columns\ndf['Purchase Year'] = df['Purchase Date'].dt.year\ndf['Purchase Month'] = df['Purchase Date'].dt.month_name()\n\ndf[['Purchase Date','Purchase Year','Purchase Month']]","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:27.979003Z","iopub.execute_input":"2024-08-08T23:52:27.979340Z","iopub.status.idle":"2024-08-08T23:52:28.168179Z","shell.execute_reply.started":"2024-08-08T23:52:27.979312Z","shell.execute_reply":"2024-08-08T23:52:28.167006Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Re-calculate total purchase amount\n# Remove incorrect `Total Purchased Amount` column\ndf['Total Price'] = df['Product Price'] * df['Quantity']\n#df = df.drop(['Total Purchase Amount'], axis=1)\n\n# Re-order columns & exclude `Total Purchased Amount` and `Age`\ncols = ['Customer ID','Customer Name','Purchase Date','Purchase Year','Purchase Month','Product Category','Product Price','Quantity','Total Price','Payment Method','Returns','Gender','Customer Age','Churn']\ndf = df[cols]\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:28.169880Z","iopub.execute_input":"2024-08-08T23:52:28.170219Z","iopub.status.idle":"2024-08-08T23:52:28.265389Z","shell.execute_reply.started":"2024-08-08T23:52:28.170190Z","shell.execute_reply":"2024-08-08T23:52:28.264092Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe(include='all')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:28.268553Z","iopub.execute_input":"2024-08-08T23:52:28.268916Z","iopub.status.idle":"2024-08-08T23:52:28.558846Z","shell.execute_reply.started":"2024-08-08T23:52:28.268887Z","shell.execute_reply":"2024-08-08T23:52:28.557586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming your DataFrame is named 'df'\n\n# Group by gender and calculate churn rate\nchurn_by_gender = df.groupby(['Gender'])['Churn'].mean() * 100\n\nprint(churn_by_gender)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:28.560346Z","iopub.execute_input":"2024-08-08T23:52:28.560788Z","iopub.status.idle":"2024-08-08T23:52:28.588774Z","shell.execute_reply.started":"2024-08-08T23:52:28.560752Z","shell.execute_reply":"2024-08-08T23:52:28.587641Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a bar chart\nchurn_by_gender.plot(kind='bar')\n\n# Add labels and title\nplt.xlabel('Gender')\nplt.ylabel('Churn Rate (%)')\nplt.title('Churn Rate by Gender')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:28.590597Z","iopub.execute_input":"2024-08-08T23:52:28.590917Z","iopub.status.idle":"2024-08-08T23:52:28.861567Z","shell.execute_reply.started":"2024-08-08T23:52:28.590887Z","shell.execute_reply":"2024-08-08T23:52:28.859945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Assuming your DataFrame is named 'df'\n\n# Define age groups function\ndef age_group(age):\n    if age < 30:\n        return '18-29'\n    elif age < 40:\n        return '30-39'\n    elif age < 50:\n        return '40-49'\n    else:\n        return '50+'\n\n# Create age groups column\ndf['Age Group'] = df['Customer Age'].apply(age_group)\n\n# Calculate churn by gender and age group\nchurn_by_gender_age = df.groupby(['Gender', 'Age Group'])['Churn'].mean() * 100\n\n# Unstack the data for plotting\nchurn_by_gender_age_unstacked = churn_by_gender_age.unstack()\n\n# Create the bar plot\nchurn_by_gender_age_unstacked.plot(kind='bar')\nplt.xlabel('Age Group')\nplt.ylabel('Churn Rate (%)')\nplt.title('Churn Rate by Gender and Age Group')\nplt.xticks(rotation=0)\nplt.legend(title='Gender')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:28.863653Z","iopub.execute_input":"2024-08-08T23:52:28.864145Z","iopub.status.idle":"2024-08-08T23:52:29.300466Z","shell.execute_reply.started":"2024-08-08T23:52:28.864088Z","shell.execute_reply":"2024-08-08T23:52:29.299063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate churn rate by product category\nchurn_by_product_category = df.groupby('Product Category')['Churn'].mean() * 100\nprint(churn_by_product_category)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:29.302552Z","iopub.execute_input":"2024-08-08T23:52:29.303038Z","iopub.status.idle":"2024-08-08T23:52:29.335842Z","shell.execute_reply.started":"2024-08-08T23:52:29.302997Z","shell.execute_reply":"2024-08-08T23:52:29.334580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate churn rate by payment method\nchurn_by_payment_method = df.groupby('Payment Method')['Churn'].mean() * 100\nprint(churn_by_payment_method)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:29.337500Z","iopub.execute_input":"2024-08-08T23:52:29.337906Z","iopub.status.idle":"2024-08-08T23:52:29.369578Z","shell.execute_reply.started":"2024-08-08T23:52:29.337873Z","shell.execute_reply":"2024-08-08T23:52:29.368279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Step 1: Calculate total revenue and purchase frequency by customer\ncustomer_revenue = df.groupby('Customer ID')['Total Price'].sum()\npurchase_frequency = df.groupby('Customer ID')['Purchase Date'].count()\n\n# Combine these into a DataFrame\ncustomer_df = pd.DataFrame({\n    'Total Revenue': customer_revenue,\n    'Purchase Frequency': purchase_frequency\n})\n\n# Step 2: Calculate average purchase value per customer\ncustomer_df['Average Purchase Value'] = customer_df['Total Revenue'] / customer_df['Purchase Frequency']\n\n# Step 3: Calculate customer value (using Total Revenue as an example)\ncustomer_df['Customer Value'] = customer_df['Total Revenue']\n\n# Step 4: Calculate churn rate and average customer lifespan\nchurn_rate = df['Churn'].mean()\naverage_customer_lifespan = 1 / churn_rate\n\n# Step 5: Calculate CLTV\ncustomer_df['CLTV'] = customer_df['Customer Value'] * average_customer_lifespan\n\n# Step 6: Merge the CLTV back to the original DataFrame\ndf = df.merge(customer_df[['CLTV']], left_on='Customer ID', right_index=True, how='left')\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:29.371212Z","iopub.execute_input":"2024-08-08T23:52:29.371652Z","iopub.status.idle":"2024-08-08T23:52:29.525274Z","shell.execute_reply.started":"2024-08-08T23:52:29.371613Z","shell.execute_reply":"2024-08-08T23:52:29.523889Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df[['Customer ID', 'CLTV']])\n","metadata":{"execution":{"iopub.status.busy":"2024-08-08T23:52:52.562223Z","iopub.execute_input":"2024-08-08T23:52:52.563115Z","iopub.status.idle":"2024-08-08T23:52:52.574177Z","shell.execute_reply.started":"2024-08-08T23:52:52.563064Z","shell.execute_reply":"2024-08-08T23:52:52.572884Z"},"trusted":true},"execution_count":null,"outputs":[]}]}